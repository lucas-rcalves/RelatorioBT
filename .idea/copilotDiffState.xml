<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/RelatorioBT/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RelatorioBT/.env" />
              <option name="updatedContent" value="USUARIO=seu_usuario_aqui&#10;SENHA=sua_senha_aqui&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/RelatorioBT/bot.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/RelatorioBT/bot.py" />
              <option name="originalContent" value="from botcity.core import DesktopBot&#10;import time&#10;import pandas as pd&#10;from datetime import datetime&#10;import os&#10;import sys&#10;import shutil&#10;from botcity.maestro import *&#10;from dotenv import load_dotenv&#10;&#10;&#10;# Disable errors if we are not connected to Maestro&#10;BotMaestroSDK.RAISE_NOT_CONNECTED = False&#10;&#10;# Carregar variáveis do .env&#10;load_dotenv()&#10;&#10;# Exemplo de como acessar as variáveis:&#10;# usuario = os.getenv('USUARIO')&#10;# senha = os.getenv('SENHA')&#10;&#10;def not_found(label):&#10;    print(f&quot;Elemento não encontrado: {label}&quot;)&#10;    raise Exception(f&quot;Elemento não encontrado: {label}&quot;)&#10;&#10;# def enviar_mensagem_erro(bot, erro):&#10;#     try:&#10;#         mensagem = f&quot;⚠️ *ERRO NA EXECUÇÃO DO BOT* ⚠️\n\n{erro}&quot;&#10;#         enviar_whatsapp(bot, mensagem)&#10;#     except Exception as e:&#10;#         print(f&quot;Falha ao enviar mensagem de erro: {e}&quot;)&#10;&#10;def get_excel_path():&#10;    &quot;&quot;&quot;Retorna o caminho absoluto para o arquivo Excel&quot;&quot;&quot;&#10;    script_dir = os.path.dirname(os.path.abspath(__file__))&#10;    return os.path.join(script_dir, &quot;ContatosGEST.xlsx&quot;)&#10;&#10;def load_contacts():&#10;    &quot;&quot;&quot;Carrega a tabela de contatos com tratamento de erros&quot;&quot;&quot;&#10;    excel_path = get_excel_path()&#10;&#10;    if not os.path.exists(excel_path):&#10;        raise FileNotFoundError(f&quot;Arquivo não encontrado em {excel_path}&quot;)&#10;&#10;    try:&#10;        return pd.read_excel(excel_path)&#10;    except Exception as e:&#10;        raise Exception(f&quot;ERRO ao ler arquivo Excel: {e}&quot;)&#10;&#10;&#10;&#10;def login_portal(bot):&#10;    try:&#10;        usuario = os.getenv('USUARIO')&#10;        senha = os.getenv('SENHA')&#10;        bot.browse(&quot;https://portalanalysisbi.com/login&quot;)&#10;        time.sleep(3)&#10;        bot.paste(&quot;lucas.alves@adtsa.com.br&quot;)&#10;        bot.tab()&#10;        bot.paste(&quot;Adtsa2025@@&quot;)&#10;        bot.enter()&#10;        time.sleep(5)&#10;&#10;        # Searching for element 'Novos '&#10;        if not bot.find(&quot;Novos&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;Novos&quot;)&#10;        bot.click()&#10;                &#10;    except Exception as e:&#10;        raise Exception(f&quot;Falha no login: {str(e)}&quot;)&#10;&#10;def mover_arquivo_para_destino(nome_arquivo):&#10;    &quot;&quot;&quot;Move a planilha da pasta de Downloads para a pasta RelatorioBT&quot;&quot;&quot;&#10;    origem = fr'C:\Users\adtsa\Downloads\{nome_arquivo}.xlsx'&#10;    destino = fr'C:\Users\adtsa\PycharmProjects\RelatorioBT\arquivosEXCEL\{nome_arquivo}.xlsx'&#10;&#10;    tempo_limite = time.time() + 30  # espera até 30 segundos&#10;    while not os.path.exists(origem):&#10;        if time.time() &gt; tempo_limite:&#10;            raise FileNotFoundError(f&quot;Arquivo não encontrado em {origem} após 30s&quot;)&#10;        time.sleep(1)&#10;&#10;    try:&#10;        os.rename(origem, destino)&#10;        print(f&quot;Arquivo movido para: {destino}&quot;)&#10;        return destino&#10;    except Exception as e:&#10;        raise Exception(f&quot;Erro ao mover arquivo para pasta destino: {e}&quot;)&#10;&#10;&#10;&#10;&#10;&#10;def obter_planilha(bot, nome_arquivo):&#10;    try:&#10;&#10;        # Searching for element 'VendasMove '&#10;        if not bot.find(&quot;VendasMove&quot;, matching=0.97, waiting_time=30000):&#10;            not_found(&quot;VendasMove&quot;)&#10;        bot.move()&#10;&#10;        # Searching for element 'BtExportar '&#10;        if not bot.find(&quot;BtExportar&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;BtExportar&quot;)&#10;        bot.click()&#10;&#10;        # Searching for element 'ExportExcel '&#10;        if not bot.find(&quot;ExportExcel&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;ExportExcel&quot;)&#10;        bot.click()&#10;&#10;        # Searching for element 'RelativoNome '&#10;        if not bot.find(&quot;RelativoNome&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;RelativoNome&quot;)&#10;        bot.click_relative(239, 13)&#10;&#10;        bot.type_keys([&quot;ctrl&quot;, &quot;a&quot;])&#10;        bot.backspace()&#10;        bot.paste(nome_arquivo)&#10;&#10;&#10;        # Searching for element 'BaixarPlanilha '&#10;        if not bot.find(&quot;BaixarPlanilha&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;BaixarPlanilha&quot;)&#10;        bot.click()&#10;&#10;        time.sleep(10)&#10;&#10;        # Processamento do arquivo&#10;        file_path = mover_arquivo_para_destino(nome_arquivo)&#10;&#10;        if not os.path.exists(file_path):&#10;            raise FileNotFoundError(f&quot;Arquivo não encontrado em {file_path}&quot;)&#10;&#10;        aba4 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_3')&#10;        aba5 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_4')&#10;        aba6 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_5')&#10;        aba7 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_6')&#10;&#10;        def get_value_or_dash(df, row, col):&#10;            try:&#10;                if df.empty or len(df.columns) &lt;= col or len(df) &lt;= row:&#10;                    return &quot;-&quot;&#10;                value = df.iloc[row, col]&#10;                return value if not pd.isna(value) else &quot;-&quot;&#10;            except:&#10;                return &quot;-&quot;&#10;&#10;        total_diario = get_value_or_dash(aba6, 0, 0)&#10;        total_mensal = get_value_or_dash(aba7, 0, 0)&#10;&#10;        tipos = ['Direta', 'Novo', 'Usado']&#10;        vendas_diarias = {tipo: get_value_or_dash(aba4, i, 1) for i, tipo in enumerate(tipos) if i &lt; len(aba4)}&#10;        vendas_mensais = {tipo: get_value_or_dash(aba5, i, 1) for i, tipo in enumerate(tipos) if i &lt; len(aba5)}&#10;&#10;        data_hoje = datetime.now().strftime('%d/%m/%Y')&#10;        data_mensal = datetime.now().strftime('%m/%Y')&#10;&#10;        informe_base = f&quot;&quot;&quot;&#10;*INFORMATIVO DE VENDAS VEÍCULOS*&#10;&#10;Venda diária - {data_hoje}:&#10;● VDI: {vendas_diarias.get('Direta', '-')}&#10;● VN: {vendas_diarias.get('Novo', '-')}&#10;● VU: {vendas_diarias.get('Usado', '-')}&#10;● Total: {total_diario}&#10;&#10;Vendas Mensal - {data_mensal}:&#10;● VDI: {vendas_mensais.get('Direta', '-')}&#10;● VN: {vendas_mensais.get('Novo', '-')}&#10;● VU: {vendas_mensais.get('Usado', '-')}&#10;● Total: {total_mensal}&#10;&quot;&quot;&quot;&#10;        return informe_base&#10;&#10;    except Exception as e:&#10;        raise Exception(f&quot;Erro ao obter planilha {nome_arquivo}: {str(e)}&quot;)&#10;&#10;&#10;def obter_planilha_pendentes(bot, nome_arquivo, tipo_veiculo='carros'):&#10;&#10;&#10;    # Searching for element 'PendentesNovos '&#10;    if not bot.find(&quot;Pendentes Novos&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;Pendentes Novos&quot;)&#10;    bot.click()&#10;    &#10;&#10;    # Searching for element 'BtExportar '&#10;    if not bot.find(&quot;BtExportar&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;BtExportar&quot;)&#10;    bot.click()&#10;&#10;    # Searching for element 'ExportExcel '&#10;    if not bot.find(&quot;ExportExcel&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;ExportExcel&quot;)&#10;    bot.click()&#10;&#10;    # Searching for element 'RelativoNome '&#10;    if not bot.find(&quot;RelativoNome&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;RelativoNome&quot;)&#10;    bot.click_relative(239, 13)&#10;&#10;    bot.type_keys([&quot;ctrl&quot;, &quot;a&quot;])&#10;    bot.backspace()&#10;    bot.paste(nome_arquivo)&#10;&#10;&#10;    # Searching for element 'BaixarPlanilha '&#10;    if not bot.find(&quot;BaixarPlanilha&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;BaixarPlanilha&quot;)&#10;    bot.click()&#10;&#10;    time.sleep(10)&#10;&#10;    file_path = mover_arquivo_para_destino(nome_arquivo)&#10;&#10;    if not os.path.exists(file_path):&#10;        print(f&quot;ERRO: Arquivo não encontrado em {file_path}&quot;)&#10;        return &quot;⚠️ Arquivo não encontrado&quot;&#10;&#10;    try:&#10;        aba_volume = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA', engine='openpyxl')&#10;        aba_chart = pd.read_excel(file_path, sheet_name='Chart 1', engine='openpyxl', header=None)&#10;&#10;        print(&quot;\nDEBUG - Conteúdo das abas:&quot;)&#10;        print(&quot;Aba VOLUME FATURADO NO DIA:&quot;)&#10;        print(aba_volume)&#10;        print(&quot;\nAba Chart 1:&quot;)&#10;        print(aba_chart)&#10;&#10;        # Função para extrair valores&#10;        def get_value(df, row, col, default=&quot;-&quot;):&#10;            try:&#10;                if df.empty or len(df.columns) &lt;= col or len(df) &lt;= row:&#10;                    return default&#10;                value = df.iloc[row, col]&#10;                return default if pd.isna(value) else value&#10;            except:&#10;                return default&#10;&#10;        # Extrair totais - CORREÇÃO AQUI: garantindo que pega as colunas corretas&#10;        total_pendentes = get_value(aba_volume, 0, 0)  # Primeira coluna&#10;        valor_total = get_value(aba_volume, 0, 1)      # Segunda coluna&#10;&#10;        # Formatar valor monetário - CORREÇÃO: verifica se é numérico antes de formatar&#10;        try:&#10;            valor_num = float(valor_total)&#10;            valor_formatado = f&quot;R$ {valor_num:,.2f}&quot;.replace(&quot;,&quot;, &quot;X&quot;).replace(&quot;.&quot;, &quot;,&quot;).replace(&quot;X&quot;, &quot;.&quot;)&#10;        except (ValueError, TypeError):&#10;            valor_formatado = &quot;-&quot;&#10;&#10;        # Processar por tipo de veículo&#10;        if tipo_veiculo == 'caminhoes':&#10;            # Para caminhões - apenas OMODA/JAECOO e Volks&#10;            omoda_jaecoo = &quot;-&quot;&#10;            volks = &quot;-&quot;&#10;&#10;            if not aba_chart.empty and len(aba_chart) &gt;= 2:&#10;                for col in range(len(aba_chart.columns)):&#10;                    cabecalho = str(get_value(aba_chart, 0, col, &quot;&quot;)).upper()&#10;                    valor = get_value(aba_chart, 1, col)&#10;&#10;                    if &quot;OMODA&quot; in cabecalho or &quot;JAECOO&quot; in cabecalho:&#10;                        omoda_jaecoo = valor&#10;                    elif &quot;VOLKS&quot; in cabecalho:&#10;                        volks = valor&#10;&#10;            informe = f&quot;&quot;&quot;&#10;Total de pedidos pendentes:&#10;● OMODA | JAECOO: {omoda_jaecoo}&#10;● Volks: {volks}&#10;● Total: {total_pendentes}&#10;● Valor: {valor_formatado}&#10;&quot;&quot;&quot;&#10;        else:&#10;            # Para carros - apenas as marcas solicitadas&#10;            marcas_procuradas = {&#10;                'VOLKS': 'Volks',&#10;                'RENAULT': 'Renault',&#10;                'GM': 'GM',&#10;                'FORD': 'Ford',&#10;                'CITROEN': 'Citroen',&#10;                'PEUGEOT': 'Peugeot'&#10;            }&#10;&#10;            # Inicializa todas as marcas com &quot;-&quot;&#10;            valores = {v: &quot;-&quot; for v in marcas_procuradas.values()}&#10;&#10;            if not aba_chart.empty and len(aba_chart) &gt;= 2:&#10;                for col in range(len(aba_chart.columns)):&#10;                    cabecalho = str(get_value(aba_chart, 0, col, &quot;&quot;)).upper()&#10;                    valor = get_value(aba_chart, 1, col)&#10;&#10;                    for marca_key, marca_nome in marcas_procuradas.items():&#10;                        if marca_key in cabecalho:&#10;                            valores[marca_nome] = valor&#10;                            break&#10;&#10;            informe = f&quot;&quot;&quot;&#10;Total de pedidos pendentes:&#10;● Volks: {valores['Volks']}&#10;● Renault: {valores['Renault']}&#10;● GM: {valores['GM']}&#10;● Citroen: {valores['Citroen']}&#10;● Peugeot: {valores['Peugeot']}&#10;● Ford: {valores['Ford']}&#10;● Total: {total_pendentes}&#10;● Valor: {valor_formatado}&#10;&quot;&quot;&quot;&#10;        return informe&#10;&#10;    except Exception as e:&#10;        print(f&quot;Erro ao processar pendentes: {e}&quot;)&#10;        return &quot;\nTotal de pedidos pendentes:\n⚠️ Dados não disponíveis no momento&quot;&#10;&#10;&#10;def sair_entrar(bot):&#10;    try:&#10;        # Searching for element 'BtSair '&#10;        if not bot.find(&quot;BtSair&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;BtSair&quot;)&#10;        bot.click()&#10;&#10;        # Searching for element 'EntraCaminhões '&#10;        if not bot.find(&quot;EntraCaminhões&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;EntraCaminhões&quot;)&#10;        bot.click()&#10;    except Exception as e:&#10;        raise Exception(f&quot;Falha ao trocar de portal: {str(e)}&quot;)&#10;&#10;def enviar_whatsapp(bot, mensagem):&#10;    # Carrega os contatos da planilha&#10;    tabela = load_contacts()&#10;    if tabela is None:&#10;        print(&quot;Não foi possível carregar os contatos. Encerrando execução.&quot;)&#10;        return&#10;&#10;    print(&quot;Contatos carregados com sucesso:&quot;)&#10;    print(tabela)&#10;&#10;    # Abre o WhatsApp Web&#10;    bot.browse(&quot;https://web.whatsapp.com/&quot;)&#10;    time.sleep(15)  # Tempo para carregar o WhatsApp Web&#10;&#10;    # Para cada contato na planilha&#10;    for linha in tabela.index:&#10;        contato = tabela.loc[linha, &quot;contato&quot;]&#10;&#10;        try:&#10;            print(f&quot;Processando contato: {contato}&quot;)&#10;&#10;            # Searching for element 'Lupinha '&#10;            if not bot.find(&quot;Lupinha&quot;, matching=0.97, waiting_time=10000):&#10;                not_found(&quot;Lupinha&quot;)&#10;            bot.click()&#10;&#10;&#10;            # Limpa o campo de pesquisa e digita o contato&#10;            bot.control_a()&#10;            bot.backspace()&#10;            bot.type_keys_with_interval(100,    str(contato))&#10;            time.sleep(3)  # Espera os resultados aparecerem&#10;&#10;            bot.enter()&#10;            time.sleep(5)  # Tempo para carregar a conversa&#10;&#10;            # Envia a mensagem unificada&#10;            bot.paste(mensagem)&#10;            time.sleep(1)&#10;            bot.enter()&#10;            time.sleep(3)  # Espera a mensagem ser enviada&#10;&#10;            print(f&quot;Mensagem enviada para: {contato}&quot;)&#10;&#10;            # Espera um pouco antes do próximo contato&#10;            time.sleep(3)&#10;&#10;        except Exception as e:&#10;            print(f&quot;Erro ao enviar para {contato}: {str(e)}&quot;)&#10;            # Tenta continuar para o próximo contato&#10;            continue&#10;&#10;    bot.alt_f4()&#10;&#10;def main():&#10;    bot = DesktopBot()&#10;    erro_global = None&#10;&#10;    PASTA_DESTINO = r&quot;C:\Users\adtsa\PycharmProjects\RelatorioBT\arquivosEXCEL&quot;&#10;    os.makedirs(PASTA_DESTINO, exist_ok=True)&#10;&#10;    try:&#10;        # ========== CARROS ==========&#10;        login_portal(bot)&#10;        informe_vendas_carros = obter_planilha(bot, &quot;VN Carros&quot;)&#10;        informe_pendentes_carros = obter_planilha_pendentes(bot, &quot;VN Carros Pendentes&quot;, 'carros')&#10;&#10;        # ========== CAMINHÕES ==========&#10;        sair_entrar(bot)&#10;        time.sleep(5)&#10;        informe_vendas_caminhoes = obter_planilha(bot, &quot;VN Caminhões&quot;)&#10;        informe_pendentes_caminhoes = obter_planilha_pendentes(bot, &quot;VN Caminhões pendentes&quot;, 'caminhoes')&#10;&#10;        # ========== MENSAGEM FINAL ==========&#10;        mensagem_unificada = (&#10;            f&quot;{informe_vendas_carros}\n&quot;&#10;            f&quot;{informe_pendentes_carros}\n&quot;&#10;            f&quot;*CAMINHÕES*\n&quot;&#10;            f&quot;{informe_vendas_caminhoes}\n&quot;&#10;            f&quot;{informe_pendentes_caminhoes}&quot;&#10;        )&#10;&#10;        enviar_whatsapp(bot, mensagem_unificada)&#10;&#10;        # Apaga a pasta com os arquivos após envio das mensagens&#10;        try:&#10;            shutil.rmtree(PASTA_DESTINO)&#10;            print(f&quot;Pasta {PASTA_DESTINO} excluída com sucesso.&quot;)&#10;        except Exception as e:&#10;            print(f&quot;Erro ao excluir pasta {PASTA_DESTINO}: {e}&quot;)&#10;&#10;&#10;    except Exception as e:&#10;        # erro_global = str(e)&#10;        # print(f&quot;ERRO CRÍTICO: {erro_global}&quot;)&#10;        #&#10;        # # Tenta notificar o erro mesmo que tenha falhado em outras etapas&#10;        # try:&#10;        #     if &quot;Falha ao enviar mensagem no WhatsApp&quot; not in erro_global:&#10;        #         #enviar_mensagem_erro(bot, erro_global)&#10;        # except Exception as e2:&#10;        #     print(f&quot;Falha ao tentar notificar erro: {e2}&quot;)&#10;&#10;        # Encerra com erro&#10;        sys.exit(1)&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()&#10;" />
              <option name="updatedContent" value="from botcity.core import DesktopBot&#10;import time&#10;import pandas as pd&#10;from datetime import datetime&#10;import os&#10;import sys&#10;import shutil&#10;from botcity.maestro import *&#10;from dotenv import load_dotenv&#10;&#10;&#10;# Disable errors if we are not connected to Maestro&#10;BotMaestroSDK.RAISE_NOT_CONNECTED = False&#10;&#10;# Carregar variáveis do .env&#10;load_dotenv()&#10;&#10;# Exemplo de como acessar as variáveis:&#10;# usuario = os.getenv('USUARIO')&#10;# senha = os.getenv('SENHA')&#10;&#10;def not_found(label):&#10;    print(f&quot;Elemento não encontrado: {label}&quot;)&#10;    raise Exception(f&quot;Elemento não encontrado: {label}&quot;)&#10;&#10;# def enviar_mensagem_erro(bot, erro):&#10;#     try:&#10;#         mensagem = f&quot;⚠️ *ERRO NA EXECUÇÃO DO BOT* ⚠️\n\n{erro}&quot;&#10;#         enviar_whatsapp(bot, mensagem)&#10;#     except Exception as e:&#10;#         print(f&quot;Falha ao enviar mensagem de erro: {e}&quot;)&#10;&#10;def get_excel_path():&#10;    &quot;&quot;&quot;Retorna o caminho absoluto para o arquivo Excel&quot;&quot;&quot;&#10;    script_dir = os.path.dirname(os.path.abspath(__file__))&#10;    return os.path.join(script_dir, &quot;ContatosGEST.xlsx&quot;)&#10;&#10;def load_contacts():&#10;    &quot;&quot;&quot;Carrega a tabela de contatos com tratamento de erros&quot;&quot;&quot;&#10;    excel_path = get_excel_path()&#10;&#10;    if not os.path.exists(excel_path):&#10;        raise FileNotFoundError(f&quot;Arquivo não encontrado em {excel_path}&quot;)&#10;&#10;    try:&#10;        return pd.read_excel(excel_path)&#10;    except Exception as e:&#10;        raise Exception(f&quot;ERRO ao ler arquivo Excel: {e}&quot;)&#10;&#10;&#10;&#10;def login_portal(bot):&#10;    try:&#10;        usuario = os.getenv('USUARIO')&#10;        senha = os.getenv('SENHA')&#10;        bot.browse(&quot;https://portalanalysisbi.com/login&quot;)&#10;        time.sleep(3)&#10;        bot.paste(usuario)&#10;        bot.tab()&#10;        bot.paste(senha)&#10;        bot.enter()&#10;        time.sleep(5)&#10;&#10;        # Searching for element 'Novos '&#10;        if not bot.find(&quot;Novos&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;Novos&quot;)&#10;        bot.click()&#10;                &#10;    except Exception as e:&#10;        raise Exception(f&quot;Falha no login: {str(e)}&quot;)&#10;&#10;def mover_arquivo_para_destino(nome_arquivo):&#10;    &quot;&quot;&quot;Move a planilha da pasta de Downloads para a pasta RelatorioBT&quot;&quot;&quot;&#10;    origem = fr'C:\Users\adtsa\Downloads\{nome_arquivo}.xlsx'&#10;    destino = fr'C:\Users\adtsa\PycharmProjects\RelatorioBT\arquivosEXCEL\{nome_arquivo}.xlsx'&#10;&#10;    tempo_limite = time.time() + 30  # espera até 30 segundos&#10;    while not os.path.exists(origem):&#10;        if time.time() &gt; tempo_limite:&#10;            raise FileNotFoundError(f&quot;Arquivo não encontrado em {origem} após 30s&quot;)&#10;        time.sleep(1)&#10;&#10;    try:&#10;        os.rename(origem, destino)&#10;        print(f&quot;Arquivo movido para: {destino}&quot;)&#10;        return destino&#10;    except Exception as e:&#10;        raise Exception(f&quot;Erro ao mover arquivo para pasta destino: {e}&quot;)&#10;&#10;&#10;&#10;&#10;&#10;def obter_planilha(bot, nome_arquivo):&#10;    try:&#10;&#10;        # Searching for element 'VendasMove '&#10;        if not bot.find(&quot;VendasMove&quot;, matching=0.97, waiting_time=30000):&#10;            not_found(&quot;VendasMove&quot;)&#10;        bot.move()&#10;&#10;        # Searching for element 'BtExportar '&#10;        if not bot.find(&quot;BtExportar&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;BtExportar&quot;)&#10;        bot.click()&#10;&#10;        # Searching for element 'ExportExcel '&#10;        if not bot.find(&quot;ExportExcel&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;ExportExcel&quot;)&#10;        bot.click()&#10;&#10;        # Searching for element 'RelativoNome '&#10;        if not bot.find(&quot;RelativoNome&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;RelativoNome&quot;)&#10;        bot.click_relative(239, 13)&#10;&#10;        bot.type_keys([&quot;ctrl&quot;, &quot;a&quot;])&#10;        bot.backspace()&#10;        bot.paste(nome_arquivo)&#10;&#10;&#10;        # Searching for element 'BaixarPlanilha '&#10;        if not bot.find(&quot;BaixarPlanilha&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;BaixarPlanilha&quot;)&#10;        bot.click()&#10;&#10;        time.sleep(10)&#10;&#10;        # Processamento do arquivo&#10;        file_path = mover_arquivo_para_destino(nome_arquivo)&#10;&#10;        if not os.path.exists(file_path):&#10;            raise FileNotFoundError(f&quot;Arquivo não encontrado em {file_path}&quot;)&#10;&#10;        aba4 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_3')&#10;        aba5 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_4')&#10;        aba6 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_5')&#10;        aba7 = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA_6')&#10;&#10;        def get_value_or_dash(df, row, col):&#10;            try:&#10;                if df.empty or len(df.columns) &lt;= col or len(df) &lt;= row:&#10;                    return &quot;-&quot;&#10;                value = df.iloc[row, col]&#10;                return value if not pd.isna(value) else &quot;-&quot;&#10;            except:&#10;                return &quot;-&quot;&#10;&#10;        total_diario = get_value_or_dash(aba6, 0, 0)&#10;        total_mensal = get_value_or_dash(aba7, 0, 0)&#10;&#10;        tipos = ['Direta', 'Novo', 'Usado']&#10;        vendas_diarias = {tipo: get_value_or_dash(aba4, i, 1) for i, tipo in enumerate(tipos) if i &lt; len(aba4)}&#10;        vendas_mensais = {tipo: get_value_or_dash(aba5, i, 1) for i, tipo in enumerate(tipos) if i &lt; len(aba5)}&#10;&#10;        data_hoje = datetime.now().strftime('%d/%m/%Y')&#10;        data_mensal = datetime.now().strftime('%m/%Y')&#10;&#10;        informe_base = f&quot;&quot;&quot;&#10;*INFORMATIVO DE VENDAS VEÍCULOS*&#10;&#10;Venda diária - {data_hoje}:&#10;● VDI: {vendas_diarias.get('Direta', '-')}&#10;● VN: {vendas_diarias.get('Novo', '-')}&#10;● VU: {vendas_diarias.get('Usado', '-')}&#10;● Total: {total_diario}&#10;&#10;Vendas Mensal - {data_mensal}:&#10;● VDI: {vendas_mensais.get('Direta', '-')}&#10;● VN: {vendas_mensais.get('Novo', '-')}&#10;● VU: {vendas_mensais.get('Usado', '-')}&#10;● Total: {total_mensal}&#10;&quot;&quot;&quot;&#10;        return informe_base&#10;&#10;    except Exception as e:&#10;        raise Exception(f&quot;Erro ao obter planilha {nome_arquivo}: {str(e)}&quot;)&#10;&#10;&#10;def obter_planilha_pendentes(bot, nome_arquivo, tipo_veiculo='carros'):&#10;&#10;&#10;    # Searching for element 'PendentesNovos '&#10;    if not bot.find(&quot;Pendentes Novos&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;Pendentes Novos&quot;)&#10;    bot.click()&#10;    &#10;&#10;    # Searching for element 'BtExportar '&#10;    if not bot.find(&quot;BtExportar&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;BtExportar&quot;)&#10;    bot.click()&#10;&#10;    # Searching for element 'ExportExcel '&#10;    if not bot.find(&quot;ExportExcel&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;ExportExcel&quot;)&#10;    bot.click()&#10;&#10;    # Searching for element 'RelativoNome '&#10;    if not bot.find(&quot;RelativoNome&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;RelativoNome&quot;)&#10;    bot.click_relative(239, 13)&#10;&#10;    bot.type_keys([&quot;ctrl&quot;, &quot;a&quot;])&#10;    bot.backspace()&#10;    bot.paste(nome_arquivo)&#10;&#10;&#10;    # Searching for element 'BaixarPlanilha '&#10;    if not bot.find(&quot;BaixarPlanilha&quot;, matching=0.97, waiting_time=10000):&#10;        not_found(&quot;BaixarPlanilha&quot;)&#10;    bot.click()&#10;&#10;    time.sleep(10)&#10;&#10;    file_path = mover_arquivo_para_destino(nome_arquivo)&#10;&#10;    if not os.path.exists(file_path):&#10;        print(f&quot;ERRO: Arquivo não encontrado em {file_path}&quot;)&#10;        return &quot;⚠️ Arquivo não encontrado&quot;&#10;&#10;    try:&#10;        aba_volume = pd.read_excel(file_path, sheet_name='VOLUME FATURADO NO DIA', engine='openpyxl')&#10;        aba_chart = pd.read_excel(file_path, sheet_name='Chart 1', engine='openpyxl', header=None)&#10;&#10;        print(&quot;\nDEBUG - Conteúdo das abas:&quot;)&#10;        print(&quot;Aba VOLUME FATURADO NO DIA:&quot;)&#10;        print(aba_volume)&#10;        print(&quot;\nAba Chart 1:&quot;)&#10;        print(aba_chart)&#10;&#10;        # Função para extrair valores&#10;        def get_value(df, row, col, default=&quot;-&quot;):&#10;            try:&#10;                if df.empty or len(df.columns) &lt;= col or len(df) &lt;= row:&#10;                    return default&#10;                value = df.iloc[row, col]&#10;                return default if pd.isna(value) else value&#10;            except:&#10;                return default&#10;&#10;        # Extrair totais - CORREÇÃO AQUI: garantindo que pega as colunas corretas&#10;        total_pendentes = get_value(aba_volume, 0, 0)  # Primeira coluna&#10;        valor_total = get_value(aba_volume, 0, 1)      # Segunda coluna&#10;&#10;        # Formatar valor monetário - CORREÇÃO: verifica se é numérico antes de formatar&#10;        try:&#10;            valor_num = float(valor_total)&#10;            valor_formatado = f&quot;R$ {valor_num:,.2f}&quot;.replace(&quot;,&quot;, &quot;X&quot;).replace(&quot;.&quot;, &quot;,&quot;).replace(&quot;X&quot;, &quot;.&quot;)&#10;        except (ValueError, TypeError):&#10;            valor_formatado = &quot;-&quot;&#10;&#10;        # Processar por tipo de veículo&#10;        if tipo_veiculo == 'caminhoes':&#10;            # Para caminhões - apenas OMODA/JAECOO e Volks&#10;            omoda_jaecoo = &quot;-&quot;&#10;            volks = &quot;-&quot;&#10;&#10;            if not aba_chart.empty and len(aba_chart) &gt;= 2:&#10;                for col in range(len(aba_chart.columns)):&#10;                    cabecalho = str(get_value(aba_chart, 0, col, &quot;&quot;)).upper()&#10;                    valor = get_value(aba_chart, 1, col)&#10;&#10;                    if &quot;OMODA&quot; in cabecalho or &quot;JAECOO&quot; in cabecalho:&#10;                        omoda_jaecoo = valor&#10;                    elif &quot;VOLKS&quot; in cabecalho:&#10;                        volks = valor&#10;&#10;            informe = f&quot;&quot;&quot;&#10;Total de pedidos pendentes:&#10;● OMODA | JAECOO: {omoda_jaecoo}&#10;● Volks: {volks}&#10;● Total: {total_pendentes}&#10;● Valor: {valor_formatado}&#10;&quot;&quot;&quot;&#10;        else:&#10;            # Para carros - apenas as marcas solicitadas&#10;            marcas_procuradas = {&#10;                'VOLKS': 'Volks',&#10;                'RENAULT': 'Renault',&#10;                'GM': 'GM',&#10;                'FORD': 'Ford',&#10;                'CITROEN': 'Citroen',&#10;                'PEUGEOT': 'Peugeot'&#10;            }&#10;&#10;            # Inicializa todas as marcas com &quot;-&quot;&#10;            valores = {v: &quot;-&quot; for v in marcas_procuradas.values()}&#10;&#10;            if not aba_chart.empty and len(aba_chart) &gt;= 2:&#10;                for col in range(len(aba_chart.columns)):&#10;                    cabecalho = str(get_value(aba_chart, 0, col, &quot;&quot;)).upper()&#10;                    valor = get_value(aba_chart, 1, col)&#10;&#10;                    for marca_key, marca_nome in marcas_procuradas.items():&#10;                        if marca_key in cabecalho:&#10;                            valores[marca_nome] = valor&#10;                            break&#10;&#10;            informe = f&quot;&quot;&quot;&#10;Total de pedidos pendentes:&#10;● Volks: {valores['Volks']}&#10;● Renault: {valores['Renault']}&#10;● GM: {valores['GM']}&#10;● Citroen: {valores['Citroen']}&#10;● Peugeot: {valores['Peugeot']}&#10;● Ford: {valores['Ford']}&#10;● Total: {total_pendentes}&#10;● Valor: {valor_formatado}&#10;&quot;&quot;&quot;&#10;        return informe&#10;&#10;    except Exception as e:&#10;        print(f&quot;Erro ao processar pendentes: {e}&quot;)&#10;        return &quot;\nTotal de pedidos pendentes:\n⚠️ Dados não disponíveis no momento&quot;&#10;&#10;&#10;def sair_entrar(bot):&#10;    try:&#10;        # Searching for element 'BtSair '&#10;        if not bot.find(&quot;BtSair&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;BtSair&quot;)&#10;        bot.click()&#10;&#10;        # Searching for element 'EntraCaminhões '&#10;        if not bot.find(&quot;EntraCaminhões&quot;, matching=0.97, waiting_time=10000):&#10;            not_found(&quot;EntraCaminhões&quot;)&#10;        bot.click()&#10;    except Exception as e:&#10;        raise Exception(f&quot;Falha ao trocar de portal: {str(e)}&quot;)&#10;&#10;def enviar_whatsapp(bot, mensagem):&#10;    # Carrega os contatos da planilha&#10;    tabela = load_contacts()&#10;    if tabela is None:&#10;        print(&quot;Não foi possível carregar os contatos. Encerrando execução.&quot;)&#10;        return&#10;&#10;    print(&quot;Contatos carregados com sucesso:&quot;)&#10;    print(tabela)&#10;&#10;    # Abre o WhatsApp Web&#10;    bot.browse(&quot;https://web.whatsapp.com/&quot;)&#10;    time.sleep(15)  # Tempo para carregar o WhatsApp Web&#10;&#10;    # Para cada contato na planilha&#10;    for linha in tabela.index:&#10;        contato = tabela.loc[linha, &quot;contato&quot;]&#10;&#10;        try:&#10;            print(f&quot;Processando contato: {contato}&quot;)&#10;&#10;            # Searching for element 'Lupinha '&#10;            if not bot.find(&quot;Lupinha&quot;, matching=0.97, waiting_time=10000):&#10;                not_found(&quot;Lupinha&quot;)&#10;            bot.click()&#10;&#10;&#10;            # Limpa o campo de pesquisa e digita o contato&#10;            bot.control_a()&#10;            bot.backspace()&#10;            bot.type_keys_with_interval(100,    str(contato))&#10;            time.sleep(3)  # Espera os resultados aparecerem&#10;&#10;            bot.enter()&#10;            time.sleep(5)  # Tempo para carregar a conversa&#10;&#10;            # Envia a mensagem unificada&#10;            bot.paste(mensagem)&#10;            time.sleep(1)&#10;            bot.enter()&#10;            time.sleep(3)  # Espera a mensagem ser enviada&#10;&#10;            print(f&quot;Mensagem enviada para: {contato}&quot;)&#10;&#10;            # Espera um pouco antes do próximo contato&#10;            time.sleep(3)&#10;&#10;        except Exception as e:&#10;            print(f&quot;Erro ao enviar para {contato}: {str(e)}&quot;)&#10;            # Tenta continuar para o próximo contato&#10;            continue&#10;&#10;    bot.alt_f4()&#10;&#10;def main():&#10;    bot = DesktopBot()&#10;    erro_global = None&#10;&#10;    PASTA_DESTINO = r&quot;C:\Users\adtsa\PycharmProjects\RelatorioBT\arquivosEXCEL&quot;&#10;    os.makedirs(PASTA_DESTINO, exist_ok=True)&#10;&#10;    try:&#10;        # ========== CARROS ==========&#10;        login_portal(bot)&#10;        informe_vendas_carros = obter_planilha(bot, &quot;VN Carros&quot;)&#10;        informe_pendentes_carros = obter_planilha_pendentes(bot, &quot;VN Carros Pendentes&quot;, 'carros')&#10;&#10;        # ========== CAMINHÕES ==========&#10;        sair_entrar(bot)&#10;        time.sleep(5)&#10;        informe_vendas_caminhoes = obter_planilha(bot, &quot;VN Caminhões&quot;)&#10;        informe_pendentes_caminhoes = obter_planilha_pendentes(bot, &quot;VN Caminhões pendentes&quot;, 'caminhoes')&#10;&#10;        # ========== MENSAGEM FINAL ==========&#10;        mensagem_unificada = (&#10;            f&quot;{informe_vendas_carros}\n&quot;&#10;            f&quot;{informe_pendentes_carros}\n&quot;&#10;            f&quot;*CAMINHÕES*\n&quot;&#10;            f&quot;{informe_vendas_caminhoes}\n&quot;&#10;            f&quot;{informe_pendentes_caminhoes}&quot;&#10;        )&#10;&#10;        enviar_whatsapp(bot, mensagem_unificada)&#10;&#10;        # Apaga a pasta com os arquivos após envio das mensagens&#10;        try:&#10;            shutil.rmtree(PASTA_DESTINO)&#10;            print(f&quot;Pasta {PASTA_DESTINO} excluída com sucesso.&quot;)&#10;        except Exception as e:&#10;            print(f&quot;Erro ao excluir pasta {PASTA_DESTINO}: {e}&quot;)&#10;&#10;&#10;    except Exception as e:&#10;        # erro_global = str(e)&#10;        # print(f&quot;ERRO CRÍTICO: {erro_global}&quot;)&#10;        #&#10;        # # Tenta notificar o erro mesmo que tenha falhado em outras etapas&#10;        # try:&#10;        #     if &quot;Falha ao enviar mensagem no WhatsApp&quot; not in erro_global:&#10;        #         #enviar_mensagem_erro(bot, erro_global)&#10;        # except Exception as e2:&#10;        #     print(f&quot;Falha ao tentar notificar erro: {e2}&quot;)&#10;&#10;        # Encerra com erro&#10;        sys.exit(1)&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>